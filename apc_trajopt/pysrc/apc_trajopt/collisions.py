#!/usr/bin/env python
#
# Copyright (c) 2015, Georgia Tech Research Corporation
# All rights reserved.
#
# Author(s): Eric Huang <ehuang@gatech.edu>
# Georgia Tech Humanoid Robotics Lab
# Under Direction of Prof. Andrea Thomaz <athomaz@cc.gatech.edu>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#     * Redistributions of source code must retain the above
#       copyright notice, this list of conditions and the following
#       disclaimer.
#     * Redistributions in binary form must reproduce the above
#       copyright notice, this list of conditions and the following
#       disclaimer in the documentation and/or other materials
#       provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ''AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.

import numpy as np
from openravepy import *
from trajoptpy import *
from .action import *


def print_item_collision_pairs(item, cc, env):
    """
    Print out the allowed collision pairs between kinbody and the
    rest of the environment for a given collision checker.

    """
    for item_link in item.GetLinks():
        for target_body in env.GetBodies():
            for target_link in target_body.GetLinks():
                if cc.CanCollide(item_link, target_link):
                    print item_link.GetName(), "can collide with", target_link.GetName()


def set_target_item_collision_properties(action, problem, env):
    """
    This function sets collision checking for the target item to
    enabled or disabled depending on whether the action is a transit, pre-
    grasp, grasp, post-grasp, or nonprehensile.

    """
    # If the robot is holding the object, plan with the grabbed object.
    if is_action_grasping(action):
        robot = env.GetRobot('crichton')
        item = env.GetKinBody(action.object_key)
        link  = robot.GetLink(action.attached_link_id)
        robot.Grab(item, link)
    else:
        robot = env.GetRobot('crichton')
        robot.ReleaseAllGrabbed()
    # If the action is a grasp or postgrasp, disable collisions between the
    # grabbed object and the robot.
    if is_action_grasp(action) or is_action_postgrasp(action):
        robot = env.GetRobot('crichton')
        item = env.GetKinBody(action.object_key)
        collision_checkers = problem.GetCollisionCheckers()
        for cc in collision_checkers:
            for item_link in item.GetLinks():
                print "Disabling collisions between", item_link.GetName(), "and crichton"
                for robot_link in robot.GetLinks():
                    cc.ExcludeCollisionPair(item_link, robot_link)
                    cc.ExcludeCollisionPair(robot_link, item_link)
    # If the action is a postgrasp, enable collisions between object and shelf.
    # TODO


def check_for_collisions_interp(action, problem, result, env, dn=10):
    """
    Verify that the interpolated trajectory generated by trajopt is collision
    free. Argument 'dn' controls how fine the step sizes between points is.

    """
    # If the action is a pre-grasp, then we do not check the last segment for
    # collisions.
    pregrasp_off = 0
    if is_action_pregrasp(action):
        pregrasp_off = 1
    # Check interpolated trajectory for collisions.
    robot = env.GetRobot("crichton")
    T = result.GetTraj()
    num_pts = T.shape[0]
    num_dof = T.shape[1]
    for i in range(num_pts - 1 - pregrasp_off):
        T_i = T[i:i+1,:]
        T_i = mu.interp2d(np.linspace(0,1,dn), np.linspace(0,1,len(T_i)), T_i)
        for (_,dofs) in enumerate(T_i):
            robot.SetActiveDOFValues(dofs)
            for robot_link in robot.GetLinks():
                collision = env.CheckCollision(robot_link)
                if collision:
                    print robot_link.GetName(), "in collision at", i
                    return False
    return True


def check_for_collisions_bullet(action, problem, result, env):
    """
    Verify that the trajectory generated by trajopt is collision free.

    """
    robot = env.GetRobot("crichton")
    collision_checkers = problem.GetCollisionCheckers()
    for cc in collision_checkers:
        collisions = cc.BodyVsAll(robot)
        if len(collisions) > 0:
            return False
    return True
