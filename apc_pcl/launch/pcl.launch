<launch>

    <arg name="simulate" default="false" />
    <arg name="train" default="false" />

    <param name="stlpath" value="$(find apc_description)/objects" />
    <param name="meshpath" value="$(find apc_ros)/../amazon_picking_challenge/" />
    <param name="simulate_segmentation" value="$(arg simulate)" type="bool" />
    <param name="train_segmentation" value="$(arg train)" type="bool" />

    <node name="vision_server" pkg="apc_pcl" type="vision_server.py" 
        output="screen" />   

    <group if="$(arg simulate)" >
        <node name="simulated_segmentation" pkg="apc_pcl" type="simulated_dpm.py"
            output="screen" />
    </group>
    <group unless="$(arg simulate)" >
        <node name="segmentation_server" pkg="apc_pcl" type="segmentation_server.py"
            output="screen" />
    </group>

    <node name="cloud_culler" pkg="apc_pcl" type="frustum_server"
        output="screen" />
    <!-- <node name="icp" pkg="apc_pcl" type="icp_server" -->
        <!-- output="screen" /> -->

    <node name="get_mesh" pkg="apc_pcl" type="mesh_server"
        output="screen" />

    <!-- <node name="pcl2image" pkg="pcl_ros" type="convert_pointcloud_to_image"> -->
        <!-- <rosparam> -->
            <!-- input: /kinect2_cool/depth_lowres/points -->
            <!-- output: /camera/depth/cloud_image             -->
        <!-- </rosparam> -->
    <!-- </node> -->
</launch>